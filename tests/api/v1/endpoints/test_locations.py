import pytest
from datetime import datetime
from unittest.mock import patch, Mock # Import Mock for type hinting
from fastapi.testclient import TestClient
from app.main import app
from app.core.security import get_current_user
from types import SimpleNamespace
from typing import Dict, Any, List # For type hinting
from tests.api.v1.endpoints.test_users import create_mock_user_object_for_orm
# The above context assumes there might be a blank line after imports.
# The key change is removing leading whitespace from the 'client' initialization line.
# If line 12 in your file is indeed the `client = ...` line and it's indented:
def create_mock_location_data() -> Dict[str, Any]: # Line 11
    """Create mock location data matching the actual LocationOut schema"""
    return {
        "id": 1,
        "name": "Test Location",
        "description": "A test location description",
        "latitude": 40.7128,
        "longitude": -74.0060,
        # Remove timestamp fields if they're not in the schema
    }

@patch('app.db.crud_locations.get_locations')
def test_get_locations_success(mock_get_locations: Mock, api_client: TestClient) -> None: # Line 23
    # Create mock locations with all required fields
    mock_locations = []
    for i in range(3):
        location_data = create_mock_location_data()
        location_data["id"] = i + 1
        location_data["name"] = f"Test Location {i + 1}"
        location_data["latitude"] = 40.7128 + i
        location_data["longitude"] = -74.0060 + i
        
        mock_location = SimpleNamespace(**location_data)
        mock_locations.append(mock_location)
    
    mock_get_locations.return_value = mock_locations
    
    response = api_client.get("/api/v1/locations/")
    
    assert response.status_code == 200
    data = response.json()
    assert len(data) == 3
    assert data[0]["id"] == 1
    assert data[0]["name"] == "Test Location 1"
    assert data[0]["latitude"] == 40.7128
    assert data[0]["longitude"] == -74.0060
    # Remove this assertion
    # assert "created_at" in data[0]

@patch('app.db.crud_locations.get_locations')
def test_get_locations_empty(mock_get_all_locations: Mock, api_client: TestClient) -> None: # Renamed test and mock
    mock_get_all_locations.return_value = []
    
    response = api_client.get("/api/v1/locations/")
    
    assert response.status_code == 200
    data = response.json()
    assert len(data) == 0
    assert data == []

# Test for getting a single location successfully
@patch('app.db.crud_locations.get_location')
def test_get_single_location_success(mock_crud_get_location: Mock, api_client: TestClient) -> None:
    mock_location_data = create_mock_location_data()
    mock_location_orm = SimpleNamespace(**mock_location_data)
    mock_crud_get_location.return_value = mock_location_orm

    response = api_client.get(f"/api/v1/locations/{mock_location_data['id']}")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == mock_location_data["id"]
    assert data["name"] == mock_location_data["name"]

@patch('app.db.crud_locations.get_location')
@patch('app.db.crud_locations.create_location') # Add patch for create_location
def test_create_location_success(mock_crud_create_location: Mock, mock_crud_get_location: Mock, api_client: TestClient) -> None:
    mock_user = create_mock_user_object_for_orm()
    app.dependency_overrides[get_current_user] = lambda: mock_user

    try:
        # Create mock location with all required fields
        mock_location_data = create_mock_location_data()
        # crud.create_location will return an ORM object
        mock_created_location_orm = SimpleNamespace(**mock_location_data)
        
        mock_crud_create_location.return_value = mock_created_location_orm
        
        # The payload for creating a new location
        # It should not include 'id' as that's generated by the DB
        payload = {
            "name": mock_location_data["name"],
            "description": mock_location_data["description"],
            "latitude": mock_location_data["latitude"],
            "longitude": mock_location_data["longitude"],
        }
        response = api_client.post("/api/v1/locations/", json=payload, headers={"Authorization": "Bearer testtoken"})
        
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == 1
        assert data["name"] == "Test Location"
        assert data["description"] == "A test location description"
    finally:
        app.dependency_overrides.clear()

@patch('app.db.crud_locations.get_location')
@patch('app.db.crud_locations.update_location')
def test_update_location_success(mock_crud_update_location: Mock, mock_crud_get_location: Mock, api_client: TestClient) -> None:
    mock_user = create_mock_user_object_for_orm()
    app.dependency_overrides[get_current_user] = lambda: mock_user

    try:
        existing_loc_data = create_mock_location_data()
        mock_crud_get_location.return_value = SimpleNamespace(**existing_loc_data)

        updated_loc_data = {**existing_loc_data, "name": "Updated Test Location"}
        mock_crud_update_location.return_value = SimpleNamespace(**updated_loc_data)

        response = api_client.put(f"/api/v1/locations/{existing_loc_data['id']}", json={"name": "Updated Test Location"}, headers={"Authorization": "Bearer testtoken"})
        assert response.status_code == 200
        assert response.json()["name"] == "Updated Test Location"
    finally:
        app.dependency_overrides.clear()

@patch('app.db.crud_locations.get_location')
def test_get_location_not_found(mock_crud_get_location: Mock, api_client: TestClient) -> None:
    mock_crud_get_location.return_value = None
    
    response = api_client.get("/api/v1/locations/999")
    
    assert response.status_code == 404
    data = response.json()
    assert data["detail"] == "Location not found"

@patch('app.db.crud_locations.get_location')
@patch('app.db.crud_locations.delete_location')
def test_delete_location_success(mock_crud_delete_location: Mock, mock_crud_get_location: Mock, api_client: TestClient) -> None:
    mock_user = create_mock_user_object_for_orm()
    app.dependency_overrides[get_current_user] = lambda: mock_user

    try:
        mock_location_data = create_mock_location_data()
        mock_crud_get_location.return_value = SimpleNamespace(**mock_location_data) # Simulate location exists
        mock_crud_delete_location.return_value = SimpleNamespace(**mock_location_data) # Simulate delete returns deleted obj

        response = api_client.delete(f"/api/v1/locations/{mock_location_data['id']}", headers={"Authorization": "Bearer testtoken"})
        assert response.status_code == 200 # Or 204 if your API returns No Content
        # Add assertion for response content if applicable, e.g., assert response.json()["name"] == "Test Location"
    finally:
        app.dependency_overrides.clear()
